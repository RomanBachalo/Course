@page
@{
    @using System.Reflection;
    @using System.Linq;

    <html>
    <head>
        <style>
            .property-name {
                color: #181818;
            }
        </style>
        <script>

            const formToJSON = (elements) =>
                [].reduce.call(
                    elements,
                    (data, element) => {
                        data[element.name] = element.value;
                        return data;
                    },
                    {},
                );

            const handleFormSubmit = () => {
                // Stop the form from submitting since we’re handling that with AJAX.
                const form = document.getElementById('createForm');

                // Call our function to get the form data.
                const data = formToJSON(form.elements);

                $.ajax({
                    type: "POST",
                    url: "/CreateUpdate/create/@ViewBag.Section",
                    data: JSON.stringify(data, null, '  '),
                    dataType: "json",
                    contentType: "application/json"
                });

                // ...this is where we’d actually do something with the form data...
            };

            form.addEventListener('submit', handleFormSubmit);


            function create() {
                var formData = JSON.stringify($("#createForm").serializeArray());

                $.ajax({
                    type: "POST",
                    url: "/CreateUpdate/create/@ViewBag.Section",
                    data: formData,
                    dataType: "json",
                    contentType: "application/json"
                });
            }
        </script>
    </head>
    <body>
        <form id="createForm" action="/CreateUpdate/create/@ViewBag.Section" method="post">
            @foreach (var prop in (ViewBag.ViewModel.GetType().GetProperties() as PropertyInfo[]).Skip(1))
            {
                @if (prop.Name.Contains("Id"))
                {
                    <label for="@prop.Name">@prop.Name.Replace("Id", "")</label>
                    <br />
                    <select form="createForm" id="@prop.Name" name="@prop.Name">
                        @{
                            var viewData = (ViewBag.GetType().GetProperties(BindingFlags.NonPublic | BindingFlags.Instance))[0].GetValue(ViewBag, null)[prop.Name.Replace("Id", "")];
                            if (viewData != null)
                            {
                                @foreach (var item in viewData)
                                {
                                    <option value="@((item.GetType().GetProperties() as PropertyInfo[]).Where(pr => pr.Name.Contains("Id")).FirstOrDefault().GetValue(item, null))">
                                        @((item.GetType().GetProperties() as PropertyInfo[]).Where(pr => pr.Name.Contains("Name")).FirstOrDefault().GetValue(item, null))
                                    </option>
                                }
                            }

                        }
                    </select>
                    <br />
                }
                else
                {
                    <label for="@prop.Name">@prop.Name</label>
                    <br />
                    <input type="text" id="@prop.Name" name="@prop.Name" placeholder="@prop.Name" />
                    <br />
                }
            }
            <br />
            @*<input type="submit" value="Create" />*@
            <input type="button" value="Create" onclick="handleFormSubmit()"/>
        </form>
    </body>
</html>
}
